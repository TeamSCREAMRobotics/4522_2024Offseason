package frc2024.subsystems.swerve.generated;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
import edu.wpi.first.math.geometry.Translation2d;
import frc2024.subsystems.swerve.Drivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
  // Both sets of gains need to be tuned to your individual robot.

  // The steer motor uses any SwerveModule.SteerRequestType control request with
  // the
  // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
  private static final Slot0Configs STEER_GAINS =
      new Slot0Configs()
          .withKP(75) // 100
          .withKI(0)
          .withKD(0) // 0.2
          .withKS(0)
          .withKV(0) // 1.5
          .withKA(0);
  // When using closed-loop control, the drive motor uses the control
  // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
  private static final Slot0Configs DRIVE_GAINS =
      new Slot0Configs()
          .withKP(3.5) // 0.12
          .withKI(0)
          .withKD(0) // 3
          .withKS(0.25)
          .withKV(0)
          .withKA(0);

  // The closed-loop output type to use for the steer motors;
  // This affects the PID/FF gains for the steer motors
  private static final ClosedLoopOutputType STEER_CLOSED_LOOP_OUTPUT = ClosedLoopOutputType.Voltage;
  // The closed-loop output type to use for the drive motors;
  // This affects the PID/FF gains for the drive motors
  private static final ClosedLoopOutputType DRIVE_CLOSED_LOOP_OUTPUT = ClosedLoopOutputType.Voltage;

  // The stator current at which the wheels start to slip;
  // This needs to be tuned to your individual robot
  private static final double SLIP_CURRENT = 300.0;

  // Theoretical free speed (m/s) at 12v applied output;
  // This needs to be tuned to your individual robot
  public static final double SPEED_12V_MPS = 4.9;

  // Every 1 rotation of the azimuth results in COUPLE_RATIO drive motor turns;
  // This may need to be tuned to your individual robot
  private static final double COUPLE_RATIO = 3.125;

  private static final double DRIVE_GEAR_RATIO = 5.357142857142857;
  private static final double STEER_GEAR_RATIO = 21.428571428571427;
  private static final double WHEEL_RADIUS = 2; // inches

  private static final boolean STEER_INVERTED = true;

  private static final String CANBUS = "canivore";
  private static final int PIGEON_ID = 0;

  // These are only used for simulation
  private static final double STEER_INERTIA = 0.001; // 0.00001
  private static final double DRIVE_INERTIA = 0.05; // 0.05
  // Simulated voltage necessary to overcome friction
  private static final double STEER_KS = 0.25;
  private static final double DRIVE_KS = 0.25;

  private static final TalonFXConfiguration DRIVE_CONFIG = new TalonFXConfiguration();

  static {
    DRIVE_CONFIG.OpenLoopRamps.VoltageOpenLoopRampPeriod = 1;
  }

  private static final TalonFXConfiguration STEER_CONFIG = new TalonFXConfiguration();

  static {
  }

  private static final SwerveDrivetrainConstants DRIVETRAIN_CONSTANTS =
      new SwerveDrivetrainConstants().withPigeon2Id(PIGEON_ID).withCANbusName(CANBUS);

  private static final SwerveModuleConstantsFactory CONSTANT_FACTORY =
      new SwerveModuleConstantsFactory()
          .withDriveMotorGearRatio(DRIVE_GEAR_RATIO)
          .withSteerMotorGearRatio(STEER_GEAR_RATIO)
          .withWheelRadius(WHEEL_RADIUS)
          .withSlipCurrent(SLIP_CURRENT)
          .withSteerMotorGains(STEER_GAINS)
          .withDriveMotorGains(DRIVE_GAINS)
          .withSteerMotorClosedLoopOutput(STEER_CLOSED_LOOP_OUTPUT)
          .withDriveMotorClosedLoopOutput(DRIVE_CLOSED_LOOP_OUTPUT)
          .withSpeedAt12VoltsMps(SPEED_12V_MPS)
          .withSteerInertia(STEER_INERTIA)
          .withDriveInertia(DRIVE_INERTIA)
          .withSteerFrictionVoltage(STEER_KS)
          .withDriveFrictionVoltage(DRIVE_KS)
          .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
          .withCouplingGearRatio(COUPLE_RATIO)
          .withSteerMotorInverted(STEER_INVERTED)
          .withDriveMotorInitialConfigs(DRIVE_CONFIG)
          .withSteerMotorInitialConfigs(STEER_CONFIG);

  public static final Translation2d FRONT_LEFT_POSITION =
      new Translation2d(10.375, 11.375).div(39.37);
  public static final Translation2d FRONT_RIGHT_POSITION =
      new Translation2d(10.375, -11.375).div(39.37);
  public static final Translation2d BACK_LEFT_POSITION =
      new Translation2d(-10.375, 11.375).div(39.37);
  public static final Translation2d BACK_RIGHT_POSITION =
      new Translation2d(-10.375, -11.375).div(39.37);

  public static final double DRIVE_BASE_RADIUS = FRONT_LEFT_POSITION.getNorm();

  private static final SwerveModuleConstants MODULE_0 =
      CONSTANT_FACTORY.createModuleConstants(0, 1, 0, -0.326416015625, 0, 0, false);

  private static final SwerveModuleConstants MODULE_1 =
      CONSTANT_FACTORY.createModuleConstants(2, 3, 1, -0.467529296875, 0, 0, false);

  private static final SwerveModuleConstants MODULE_2 =
      CONSTANT_FACTORY.createModuleConstants(4, 5, 2, -0.076904296875, 0, 0, false);

  private static final SwerveModuleConstants MODULE_3 =
      CONSTANT_FACTORY.createModuleConstants(6, 7, 3, -0.5048828125, 0, 0, false);

  private static final SwerveModuleConstants FRONT_LEFT =
      MODULE_0.withLocationX(FRONT_LEFT_POSITION.getX()).withLocationY(FRONT_LEFT_POSITION.getY());
  private static final SwerveModuleConstants FRONT_RIGHT =
      MODULE_1
          .withLocationX(FRONT_RIGHT_POSITION.getX())
          .withLocationY(FRONT_RIGHT_POSITION.getY());
  private static final SwerveModuleConstants BACK_LEFT =
      MODULE_2.withLocationX(BACK_LEFT_POSITION.getX()).withLocationY(BACK_LEFT_POSITION.getY());
  private static final SwerveModuleConstants BACK_RIGHT =
      MODULE_3.withLocationX(BACK_RIGHT_POSITION.getX()).withLocationY(BACK_RIGHT_POSITION.getY());

  private static final double ODOMETRY_UPDATE_FREQUENCY = 250.0;

  public static final Drivetrain DriveTrain =
      new Drivetrain(
          DRIVETRAIN_CONSTANTS,
          ODOMETRY_UPDATE_FREQUENCY,
          FRONT_LEFT,
          FRONT_RIGHT,
          BACK_LEFT,
          BACK_RIGHT);
}
